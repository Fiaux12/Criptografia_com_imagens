# -*- coding: utf-8 -*-
"""Projeto_Intermediario.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QfrO4zfDJWziJUqOdSL-RsdOI8nzkXpb

<center>
<p>
<center>
Universidade Federal de Minas Gerais <br/>
Introdução à Programação de Computadores <br/>
2021/1
</center>
</p>								
<h1><b>Projeto Prático Intermediário</b></h1>
<b>Total: 15 pontos</b>
</center>		

<br/>
<p>
<h4><b>Professores:</b></h4>
<ul>
    <li>Jefersson Alex dos Santos (jefersson@dcc.ufmg.br)</li>
    <li>João Guilherme Maia de Menezes (jgmm@dcc.ufmg.br)</li>
</ul>
"""

#@markdown ####**Alunos** {run: "auto"}
Quantidade = "Trio" #@param ['Individual', 'Dupla', 'Trio']

Nomes = "\"Amanda Fiaux, Dara Roberta Araujo de Oliveira, Glaucus Miranda\"" #@param {type:"string"}
Matrículas = "2021032978, 2021033036, 2021032986" #@param {type:"string"}

"""------------------
# Introdução
------------------

Romeu e Julieta estão perdidamente apaixonados.
Porém, por motivos religiosos, suas famílias não aprovam seu relacionamento.
Então os dois estão vivendo um romance secreto.

Devido ao início da pandemia e à necessidade de isolamento social, eles ficaram impossibilitados de se encontrarem pessoalmente.
Além disso, eles preferem não se falar via aplicativos de videoconferência, pois temem que alguém de suas famílias os veja conversando. 
Sendo assim, eles decidiram se comunicar através de aplicativos de mensagens instantâneas. 
Porém, para evitar que as mensagens caiam em mãos erradas, elas devem ser escritas em forma de código.

Como nenhum dos dois ainda cursou alguma disciplina de programação 
eles precisam de sua ajuda para implementar programas que facilitem a troca de mensagens. 
Sua tarefa é implementar funções que lhes permitam codificar e decodificar essas mensagens
e ajudar o amor a vencer esta pandemia!

------------
# Questão 1 (1 ponto)
------------

Implemente uma função para gerar uma chave de criptografia. A função deve gerar uma chave de criptografia baseado no número de matrícula dos integrates. Para todo número de matrícula, cada um dos dez algarismos devem ser somados. Em seguida, é calculado o resto de cada soma dividida por $11$. Por fim, a chave resultante será a soma dos restos obtidos a partir de cada matrícula.

Por exemplo, considere os números de matrícula $2020666485$ e $2020666444$:

* $2 + 0 + 2 + 0 + 6 + 6 + 6 + 4 + 8 + 5 = 39$

* $2 + 0 + 2 + 0 + 6 + 6 + 6 + 4 + 4 + 4 = 34$

* O resto da divisão de $39$ por $11$ é 6 e de $34$ é $1$.

* Portanto, a chave será $C = 6 + 1 = 7$
"""

# Escreva aqui sua função

def gerar_chave (matricula1,matricula2,matricula3):
    somaI = 0
    somaII = 0
    somaIII = 0
    while int(matricula1) // 10 != 0 :
        somaI = somaI + (int(matricula1) % 10)
        somaII = somaII + (int(matricula2) % 10)
        somaIII = somaIII + (int(matricula3) % 10)
        matricula1 = int(matricula1) // 10
        matricula2 = int(matricula2) // 10
        matricula3 = int(matricula3) // 10
        
    somaI = somaI + matricula1
    somaII = somaII + matricula2
    somaIII = somaIII + matricula3
    return (somaI % 11) + (somaII % 11) + (somaIII % 11)

"""Agora execute a função que você implementou."""

# Escreva a chamada da sua função. Exemplo:    
matricula1, matricula2, matricula3 = '2021032978', '2021033036', '2021032986'

chave = gerar_chave(matricula1, matricula2, matricula3)
print(chave)

"""------------
# Questão 2 (3 pontos)
------------

Implemete uma função para criptografar uma menssagem. A função deve deslocar cada letra do alfabeto da sua posição um número fixo de lugares de acordo com a chave gerada na tarefa anterior: por exemplo, se a chave tiver o valor 3, então A torna-se D, B torna-se E, etc. 

Para isso, deve ser utilizado a codificação [ASCII](https://pt.wikipedia.org/wiki/ASCII). A codificação ASCII é usada para representar textos em computadores. Nela, cada caracter é representado por um número inteiro. Além disso, os caracteres são codificados em ordem alfabética. Você pode usar a função pré-definida ord(), que
converte um caractere em um código numérico e a função pré-definida chr(), que converte códigos
numéricos em caracteres. Por exemplo, ao utilizar ord("A"), o número inteiro 65 é retornado. Ao utilizar char(65), o caractere "A" é retornado.

Supondo que se deseja encriptar a mensagem "Programação de Computadores" e sua chave tenha o valor 3, a menssagem cifrada deve ser "Surjudpdçãr gh Frpsxwdgruhv".

**Observação**: espaços em branco, pontuações e letras com acentuação não devem ser modificados. Qualquer deslocamento no caractere "Z" ou "z" deve retornar ao início do alfabeto. Por exemplo: seja uma chave de valor 3, "z" e "Z" devem ser transformados em "c" e "C", respectivamente.
"""

# Escreva aqui sua função

def criptografar(msg, chave):
    alphabetmin='abcdefghijklmnopqrstuvwxyz'
    alphabetmax='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    res=''
    for c in msg:
        index=alphabetmin.find(c)
        index1=alphabetmax.find(c)
        if index==-1 and index1==-1:
            res+=c
        elif index!=-1 and index1==-1:
            new=index+chave
            new=new%len(alphabetmin)
            res+=alphabetmin[new:new+1]
        elif index==-1 and index1!=-1:
            new=index1+chave
            new=new%len(alphabetmax)
            res+=alphabetmax[new:new+1]
    return res

"""Agora execute aqui a função que você implementou."""

msg = 'Programação de Computadores'
chave = gerar_chave(matricula1, matricula2)

# Escreva aqui a chamada da sua função. Exemplo:

cryp = criptografar(msg, chave)
print(cryp)

"""------------
# Questão 3 (3 pontos)
------------
Implemete uma função para descriptografar uma menssagem. A função deve fazer o processo inverso da criptografia da tarefa anterior.
"""

# Escreva aqui sua função

def descriptografar(msg, chave):
    alphabetmin='abcdefghijklmnopqrstuvwxyz'
    alphabetmax='ABCDEFGHIJKLMNOPQRSTUVWXYZ'
    res=''
    for c in msg:
        index=alphabetmin.find(c)
        index1=alphabetmax.find(c)
        if index==-1 and index1==-1:
            res+=c
        elif index!=-1 and index1==-1:
            new=index-chave
            new=new%len(alphabetmin)
            res+=alphabetmin[new:new+1]
        elif index==-1 and index1!=-1:
            new=index1-chave
            new=new%len(alphabetmax)
            res+=alphabetmax[new:new+1]            
    return res

"""Agora execute aqui a função que você implementou. Você conseguiu recuperar a mensagem original?"""

# Escreva aqui a chamada da sua função. Exemplo:

msg = descriptografar(cryp, chave)
print(msg)

"""------------
# Questão 4 
------------

[Esteganografia](https://www.gta.ufrj.br/ensino/eel878/redes1-2016-1/16_1/esteganografia) consiste no uso de técnicas para ocultar a existência de uma mensagem em meio a um conjunto de dados. 
Ela pode ser usada em textos, imagens, sinais de áudio e diversos outros meios de informação.
Sua tarefa é codificar uma mensagem de texto em uma imagem utilizando uma dessas técnicas.

Uma imagem colorida pode ser representada na forma de uma matriz de pixels, 
sendo que cada pixel é composto por 3 inteiros seguindo o padrão [RGB](https://pt.wikipedia.org/wiki/RGB) (um inteiro para a cor **R**ed, um para a cor **G**reen e outro para a cor **B**lue, onde cada inteiro pode assumir um valor no intervalo [0, 255]).
Sendo assim, uma imagem de tamanho N x M pixels formará uma matriz de dimensões (altura, largura, profundidade) = (N, M, 3). 

A esteganografia para uma imagem pode ser feita da seguinte forma.
É possível fazer alterações em sequências de valores de pixels sem que haja distorções visualmente perceptíveis na imagem. 
Modificando apenas o bit menos significativo (último da esquerda para direita) de cada inteiro conseguimos esconder um valor binário em uma sequência de inteiros sem alterar significativamente o valor de cada um (alterar em +1 ou -1 unidade). 
Ao agrupar esses bits em um byte (sequência de 8 bits) conseguimos obter o valor de um caractere (na base 2).
Veja o exemplo a seguir onde o caractere "z" está codificado nos bytes de uma imagem composta por 8 inteiros:

i) - Considere que a imagem $I$ é formada pela seguinte matriz $I$ = \[118 105 107 104 112 100 100 105\]. 

ii) - Convertendo os inteiros que formam a imagem $I$ para valores binários temos que $I$ = \[01110110 01101001 01101011 01101000 01110000 01100100 01100100 01101001\].

Perceba que na [representação binária](https://canaltech.com.br/produtos/como-funciona-o-sistema-binario/), os números inteiros são representados por uma sequência de valores 0 e 1, que indicam o valor de cada bit. Um conjunto de 8 bits forma 1 byte. 1 byte pode representar inteiros no intervalo [0, 255]. Por exemplo, o inteiro 118 em binário é **01110110**, que é a mesma coisa que $\mathbf{0} \times 2^{7} + \mathbf{1} \times 2^{6} + \mathbf{1} \times 2^{5} + \mathbf{1} \times 2^{4} + \mathbf{0} \times 2^{3} + \mathbf{1} \times 2^{2} + \mathbf{1} \times 2^{1} + \mathbf{0} \times 2^{0} = 118$.

iii) Queremos ocultar o caractere "z" na imagem $I$. Temos que a codificação do caractere "z" é 122, ou seja, ord("z") retorna 122. O inteiro 122 em binário é **01111010**. Logo, podemos colocar cada um desses bits nos bits menos significativos dos inteiros que foram a imagem $I$. Desse modo, a versão da imagem $I$ com o caractere "z" oculto nela é $I_{z}$ = \[0111011**0** 0110100**1** 0110101**1** 0110100**1** 0111000**1** 0110010**0** 0110010**1** 0110100**0**\].

**Dicas**:
* Para acessar uma posição de uma matriz $M$ basta utilizar o operador \[índice\]. $M[i]$ acessa a i-ésima linha da matriz e $M[i][j]$ acessa a j-ésima posição da i-ésima linha. $M[i][j][k]$ acessa o k-ésimo item da posição (i,j).
* Você pode utilizar as funções pré-definidas [bin()](https://docs.python.org/3/library/functions.html#bin) e [int()](https://docs.python.org/3/library/functions.html#int) para fazer conversões entre binários e inteiros.
* Ao codificar a mensagem na imagem, você pode adicionar um caractere especial (e.g. ‘$*$’,’ #’, ‘|’) ao final para que seja possível identificar quando ela termina ao realizar a descodificação.

Para ajudar você nessa tarefa você poderá usar as funções declaradas abaixo que fazem a leitura e exibição de uma imagem.

**Execute a célula abaixo**
"""

import requests
from PIL import Image
import numpy as np
from IPython.display import display

URL_imagem = 'https://drive.google.com/uc?export=download&id=1HDNMBW-_6tyKPGjMRuvzlmd_IQHjlanH'
URL_imagem2 = 'https://drive.google.com/uc?export=download&id=1_BZG9DhyeyMsg--zCzVRf-SklGBiTynK'

# Realiza a leitura da imagem retornado-a na forma de matriz de números
def le_imagem(imagem_URL):
    file_name = 'sample_image.jpg'
    response = requests.get(imagem_URL, allow_redirects=True)
    file = open(file_name, "wb")
    file.write(response.content)
    file.close()

    I = Image.open(file_name).copy()
    imagem_matriz = np.array(I, dtype=np.uint8)

    return imagem_matriz

# Exibe a matriz de números na forma de imagem
def imprime_imagem(imagem_matriz):
    I = Image.fromarray(imagem_matriz)
    display(I)

# Execução 
img_matriz = le_imagem(URL_imagem)
imprime_imagem(img_matriz)
print('Dimensões da imagem: {}'.format(img_matriz.shape))

"""A) Codificador (3 pontos)
----------

Implemente uma função que codifique uma mensagem de texto na matriz de inteiros de uma imagem, recebendo-as como parâmetros.
"""

# Escreva aqui sua função para esconder a mensagem na imagem

def codificador(msgString, matriz_cod):

  #Transforma a string em uma lista
  msg = []
  for element in msgString:
    msg.append(element)

  #Add um caractere para descodificar
  msg.append('*')

  #Auxiliares
  list_letter_bin = []
  list_bin = []
  p = 0
  
  #Converte a lista de letras em binario
  for element in msg:               
    letter_bin = format(ord(element), 'b') 
    list_letter_bin.append(letter_bin)

  #se algum elemento tiver 6 digitos, add um 0 no inicio
  for item in range(len(list_letter_bin)):
    if len(list_letter_bin[item]) == 6:
      list_letter_bin[item] = list_letter_bin[item][:0] + '0' + list_letter_bin[item][0:]

  #Transcreve a lista de letras em binario para uma lista de digitos 
  for element in list_letter_bin:
    for item in element:
      list_bin.append(item)

  #Ultimo elemento da lista é uma *
  list_bin.append('*')

  #Percorre a matriz da imagem
  for i in range(matriz_cod.shape[0]):
    for j in range(matriz_cod.shape[1]):
      for k in range(matriz_cod.shape[2]):                      

        #Converte um elemento da matriz para verificação*
        list_aux = []
        for item in (format(matriz_cod[i][j][k], 'b')):
          list_aux.append(item)                                
        
        # *Verificação
        if list_aux[-1] == list_bin[p]:                         
          p += 1                       
          continue
        else:
          if list_bin[p] == '1' and list_aux[-1] == '0':
            matriz_cod[i][j][k] = matriz_cod[i][j][k] + 1
            p += 1
          elif list_bin[p] == '0' and list_aux[-1] == '1':  #se 
            matriz_cod[i][j][k] = matriz_cod[i][j][k] - 1
            p += 1 
          elif list_bin[p] == '*':  #se chegar ao final da lista, retorna a matriz modificada
            return matriz_cod

"""Agora execute a sua função codificadora usando as entradas abaixo.

Observe as primeiras linhas de pixels da imagem exibida. Não deverá haver nenhuma mudança aparente em relação a imagem original. Do contrário, a comunicação pode estar em grande risco de ser descoberta.
"""

mensagem = "My love for you tonight is so deep and tender that it seems to be outside myself as well."
img_matriz_codificada = img_matriz.copy()

# Escreva aqui a chamada da sua função. Exemplo:

imprime_imagem(codificador(mensagem, img_matriz_codificada))

# Imprimindo imagem codificada para comparação
imprime_imagem(img_matriz_codificada)

"""B) Decodificador (3 pontos)
----------

Implemente uma função decodificadora que extraia uma mensagem da matriz de inteiros de uma imagem aplicando um processo reverso ao realizado pela função anterior. Esta função deverá receber a matriz como parâmetro e retornar a mensagem extraída.
"""



# Escreva aqui sua função para descodificar a mensagem da imagem

def decodificador(matriz_cod):

  #lista com o conjunto dos ultimos elementos (binario)
  list_element_bin = [] 
  
  #auxiliares 
  list_aux = []
  aux='' 

  list_msg_bin = [] #Lista das letras em binario
  list_letter_msg = [] #Lista das letras da msg

  #Percorre a matriz da imagem
  for i in range(matriz_cod.shape[0]):
    for j in range(matriz_cod.shape[1]):
      for k in range(matriz_cod.shape[2]):                      

        #Converte um elemento da matriz para verificação*
        list_aux = []
        for item in (format(matriz_cod[i][j][k], 'b')):
          list_aux.append(item)  
        list_element_bin.append(list_aux[-1])

  #Pega a frase em binario 
  for i in range(0, len(list_element_bin), 7):
    list_msg_bin = list_element_bin[i:i+7]
    aux = ''.join(map(str, list_msg_bin))

    #verifica se chegou ao ultimo elemento da msg
    if aux == "0101010":
      break

    list_letter_msg.append(chr(int(aux , 2)))

  #Traduz a mesagem de binario para uma string
  mensagem =  ''.join(map(str, list_letter_msg))
  return mensagem

"""Agora execute a sua função descodificadora usando a matriz codificada no item (A) como entrada.

Repare se a mensagem resultante é idêntica à original.
"""

# Execute aqui sua função. Exemplo:

mensagem_descodificada = decodificador(img_matriz_codificada)

# Imprimindo mensagem extraída da imagem
print(mensagem_descodificada)

"""# Vamos Juntar Tudo!

------------
# Questão 5 (1 ponto)
------------

Chegou a hora de juntar todas as suas soluções. Criptografe a mensagem armazenada na variável **msg** da célula abaixo utilizando o codificador desenvolvido na **Questão 2** e a chave obtida na **Questão 1**. Em seguida, esconda a mensagem criptografada na imagem utilizando a solução desenvolvida na **Questão 4 - A**
"""

# Mensagem que será criptografada e escondida na imagem

msg = "My love for you tonight is so deep and tender that it seems to be outside myself as well."

# imagem que será utilizada para esconder a mensagem

img_matriz_codificada = img_matriz.copy() 

## INÍCIO DO SEU CÓDIGO AQUI 
## Chamar função para criptografar a mensagem contida na variável msg com a chave gerada (Questões 1 e 2).

matricula1, matricula2, matricula3 = '2021032978', '2021033036', '2021032986'
chave = gerar_chave(matricula1, matricula2, matricula3)
cryp = criptografar(msg, chave)

## Chamar função para ocultar mensagem criptografada na imagem (Questão 4 - A).

img_matriz_codificada = codificador(cryp, img_matriz_codificada)


## FIM DO SEU CÓDIGO AQUI

print('Mensagem criptografada:', cryp) # mensagem criptografada
print()
print('Imagem original:')
imprime_imagem(img_matriz) # Imprimindo imagem original
print('Imagem modificada:')
imprime_imagem(img_matriz_codificada) # Imprimindo imagem codificada para comparação

"""------------
# Questão 6 (1 ponto)
------------

Recupere a mensagem original a partir da imagem modificada utilizando as funções desenvolvidas na **Questão 3** e na **Questão 4 - B**.
"""

## INÍCIO DO SEU CÓDIGO AQUI
## Chamar função para decodificar a imagem modificada (Questão 4 - B).

mensagem_descodificada = decodificador(img_matriz_codificada)

# Imprimindo mensagem extraída da imagem
#print(mensagem_descodificada)

## Chamar função para descriptogramar a mensagem criptografada (Questão 3).

msg_original = descriptografar(mensagem_descodificada, chave)

## FIM DO SEU CÓDIGO AQUI

print('Mensagem original:', msg_original) # mensagem criptografada